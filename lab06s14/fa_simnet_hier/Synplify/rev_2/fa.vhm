--
-- Written by Synplicity
-- Product Version "E-201103-SP2"
-- Program "Synplify Pro", Mapper "maprc, Build 507R"
-- Tue Mar 25 09:49:59 2014
--

--
-- Written by Synplify Pro version Build 507R
-- Tue Mar 25 09:49:59 2014
--

--
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library synplify;
use synplify.components.all;

entity AND2 is
port(
  O :  out std_logic;
  I0 :  in std_logic;
  I1 :  in std_logic);
end AND2;

architecture beh of AND2 is
  signal VCC : std_logic ;
  signal GND : std_logic ;
begin
VCC <= '1';
GND <= '0';
O <= I0 and I1  after 100 ps;
end beh;

--
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library synplify;
use synplify.components.all;

entity IBUF is
port(
O :  out std_logic;
I0 :  in std_logic);
end IBUF;

architecture beh of IBUF is
signal VCC : std_logic ;
signal GND : std_logic ;
begin
O <= I0;
VCC <= '1';
GND <= '0';
end beh;

--
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library synplify;
use synplify.components.all;

entity INV is
port(
O :  out std_logic;
I0 :  in std_logic);
end INV;

architecture beh of INV is
signal VCC : std_logic ;
signal GND : std_logic ;
begin
O <= not I0;
VCC <= '1';
GND <= '0';
end beh;

--
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library synplify;
use synplify.components.all;

entity OBUF is
port(
O :  out std_logic;
I0 :  in std_logic);
end OBUF;

architecture beh of OBUF is
signal VCC : std_logic ;
signal GND : std_logic ;
begin
O <= I0;
VCC <= '1';
GND <= '0';
end beh;

--
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library synplify;
use synplify.components.all;

entity full_adder is
port(
a :  in std_logic;
b :  in std_logic;
carry_in :  in std_logic;
sum :  out std_logic;
carry_out :  out std_logic);
end full_adder;

architecture beh of full_adder is
signal \U1.UUT.O1_AND\ : std_logic ;
signal \U1.UUT.O2_AND\ : std_logic ;
signal S_S : std_logic ;
signal C1 : std_logic ;
signal \U2.UUT.O1_AND\ : std_logic ;
signal \U2.UUT.O2_AND\ : std_logic ;
signal C2 : std_logic ;
signal B_I : std_logic ;
signal A_I : std_logic ;
signal CARRY_IN_I : std_logic ;
signal A_C : std_logic ;
signal B_C : std_logic ;
signal CARRY_IN_C : std_logic ;
signal SUM_C : std_logic ;
signal CARRY_OUT_C : std_logic ;
signal C1_I : std_logic ;
signal C2_I : std_logic ;
signal CARRY_OUT_C_0 : std_logic ;
signal \U2.UUT.O1_AND_I\ : std_logic ;
signal \U2.UUT.O2_AND_I\ : std_logic ;
signal SUM_C_0 : std_logic ;
signal \U1.UUT.O1_AND_I\ : std_logic ;
signal \U1.UUT.O2_AND_I\ : std_logic ;
signal S_S_I : std_logic ;
signal GND : std_logic ;
signal VCC : std_logic ;
component IBUF
port(
O :  out std_logic;
I0 :  in std_logic  );
end component;
component OBUF
port(
O :  out std_logic;
I0 :  in std_logic  );
end component;
component INV
port(
O :  out std_logic;
I0 :  in std_logic  );
end component;
component AND2
port(
O :  out std_logic;
I0 :  in std_logic;
I1 :  in std_logic  );
end component;
begin
A_Z31: IBUF port map (
O => A_C,
I0 => a);
B_Z32: IBUF port map (
O => B_C,
I0 => b);
CARRY_IN_Z33: IBUF port map (
O => CARRY_IN_C,
I0 => carry_in);
SUM_Z34: OBUF port map (
O => sum,
I0 => SUM_C);
CARRY_OUT_Z35: OBUF port map (
O => carry_out,
I0 => CARRY_OUT_C);
\U1.C1_I\: INV port map (
O => C1_I,
I0 => C1);
\U2.C2_I\: INV port map (
O => C2_I,
I0 => C2);
CARRY_OUTOR_I: INV port map (
O => CARRY_OUT_C,
I0 => CARRY_OUT_C_0);
\U2.UUT.U11.O1_AND_I\: INV port map (
O => \U2.UUT.O1_AND_I\,
I0 => \U2.UUT.O1_AND\);
\U2.UUT.U12.O2_AND_I\: INV port map (
O => \U2.UUT.O2_AND_I\,
I0 => \U2.UUT.O2_AND\);
\U2.UUT.U2.O1_I\: INV port map (
O => SUM_C,
I0 => SUM_C_0);
\U1.UUT.U11.O1_AND_I\: INV port map (
O => \U1.UUT.O1_AND_I\,
I0 => \U1.UUT.O1_AND\);
\U1.UUT.U12.O2_AND_I\: INV port map (
O => \U1.UUT.O2_AND_I\,
I0 => \U1.UUT.O2_AND\);
\U1.UUT.U2.O1_I\: INV port map (
O => S_S,
I0 => S_S_I);
\U1.UUT.U11.CARRY_IN_I\: INV port map (
O => CARRY_IN_I,
I0 => CARRY_IN_C);
\U1.UUT.U11.O1\: AND2 port map (
O => \U1.UUT.O1_AND\,
I0 => A_C,
I1 => CARRY_IN_I);
\U1.UUT.U12.A_I\: INV port map (
O => A_I,
I0 => A_C);
\U1.UUT.U12.O1\: AND2 port map (
O => \U1.UUT.O2_AND\,
I0 => A_I,
I1 => CARRY_IN_C);
\U1.UUT.U2.O1\: AND2 port map (
O => S_S_I,
I0 => \U1.UUT.O1_AND_I\,
I1 => \U1.UUT.O2_AND_I\);
\U1.CARRY_OUT\: AND2 port map (
O => C1,
I0 => A_C,
I1 => CARRY_IN_C);
\U2.UUT.U11.B_I\: INV port map (
O => B_I,
I0 => B_C);
\U2.UUT.U11.O1\: AND2 port map (
O => \U2.UUT.O1_AND\,
I0 => B_I,
I1 => S_S);
\U2.UUT.U12.O1\: AND2 port map (
O => \U2.UUT.O2_AND\,
I0 => B_C,
I1 => S_S_I);
\U2.UUT.U2.O1\: AND2 port map (
O => SUM_C_0,
I0 => \U2.UUT.O1_AND_I\,
I1 => \U2.UUT.O2_AND_I\);
\U2.CARRY_OUT\: AND2 port map (
O => C2,
I0 => B_C,
I1 => S_S);
CARRY_OUTOR: AND2 port map (
O => CARRY_OUT_C_0,
I0 => C1_I,
I1 => C2_I);
GND <= '0';
VCC <= '1';
end beh;

